L2:
.4byte 5
.ascii "Lien\n"
L5:
.4byte 2
.ascii " O"
L6:
.4byte 2
.ascii " ."
L11:
.4byte 1
.ascii "\n"
L13:
.4byte 1
.ascii "\n"
.globl L0
.type L0, @function
L0:
pushl %ebp
movl %esp,%ebp
subl $116,%esp
pushl %ebx
pushl %edi
pushl %esi
L33:
pushl %eax
pushl %ecx
pushl %edx
leal L2,%ebx
pushl %ebx
call print
addl $4,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%ebx
movl %ebx,-104(%ebp)
movl 8(%ebp),%ebx
movl -104(%ebx),%edi
movl $1,%ebx
movl %edi,%edi
subl %ebx,%edi
movl %edi,-108(%ebp)
movl -108(%ebp),%edi
movl -104(%ebp),%ebx
cmpl %edi,%ebx
jle L12
L3:
pushl %eax
pushl %ecx
pushl %edx
leal L13,%eax
pushl %eax
call print
addl $4,%esp
movl %eax,%ebx
popl %edx
popl %ecx
popl %eax
movl %ebx,%eax
jmp L32
L12:
movl $0,%ebx
movl %ebx,-112(%ebp)
movl 8(%ebp),%ebx
movl -104(%ebx),%edi
movl $1,%ebx
movl %edi,%edi
subl %ebx,%edi
movl %edi,-116(%ebp)
movl -116(%ebp),%edi
movl -112(%ebp),%ebx
cmpl %edi,%ebx
jle L10
L4:
pushl %eax
pushl %ecx
pushl %edx
leal L11,%eax
pushl %eax
call print
addl $4,%esp
movl %eax,%eax
popl %edx
popl %ecx
popl %eax
movl -104(%ebp),%edi
movl $1,%ebx
movl %edi,%edi
addl %ebx,%edi
movl %edi,-104(%ebp)
movl -108(%ebp),%edi
movl -104(%ebp),%ebx
cmpl %edi,%ebx
jle L12
L34:
jmp L3
L10:
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
pushl %ebx
movl 8(%ebp),%ebx
movl -112(%ebx),%ebx
pushl %ebx
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl -112(%ebp),%ecx
	movl	%ecx, -8(%ebp) # save pseudo-register
movl 8(%ebp),%ebx
movl -112(%ebx),%esi
movl -104(%ebp),%edi
movl $1,%ebx
movl %edi,%edi
addl %ebx,%edi
movl $4,%ebx
movl %edi,%edi
imull %ebx,%edi
movl %esi,%ebx
addl %edi,%ebx
movl (%ebx),%ebx
	movl	-8(%ebp), %ecx # load pseudo-register
cmpl %ecx,%ebx
je L7
L8:
leal L6,%ebx
movl %ebx,%ebx
L9:
pushl %eax
pushl %ecx
pushl %edx
pushl %ebx
call print
addl $4,%esp
popl %edx
popl %ecx
popl %eax
movl -112(%ebp),%edi
movl $1,%ebx
movl %edi,%edi
addl %ebx,%edi
movl %edi,-112(%ebp)
movl -116(%ebp),%edi
movl -112(%ebp),%ebx
cmpl %edi,%ebx
jle L10
L35:
jmp L4
L7:
leal L5,%ebx
movl %ebx,%ebx
jmp L9
L32:
popl %esi
popl %edi
popl %ebx
movl %ebp,%esp
popl %ebp
ret
.globl L1
.type L1, @function
L1:
pushl %ebp
movl %esp,%ebp
subl $108,%esp
pushl %ebx
pushl %edi
pushl %esi
L37:
movl 8(%ebp),%ebx
movl -104(%ebx),%edi
movl 12(%ebp),%ebx
cmpl %edi,%ebx
je L29
L30:
movl $0,%eax
movl %eax,-104(%ebp)
movl 8(%ebp),%eax
movl -104(%eax),%ebx
movl $1,%eax
movl %ebx,%ebx
subl %eax,%ebx
movl %ebx,-108(%ebp)
movl -108(%ebp),%ebx
movl -104(%ebp),%eax
cmpl %ebx,%eax
jle L28
L14:
movl $0,%eax
movl %eax,%ebx
L31:
movl %ebx,%eax
jmp L36
L29:
pushl %eax
pushl %ecx
pushl %edx
movl 8(%ebp),%eax
pushl %eax
call L0
addl $4,%esp
movl %eax,%ebx
popl %edx
popl %ecx
popl %eax
jmp L31
L28:
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%eax
pushl %eax
movl 8(%ebp),%eax
movl -108(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%esi
movl 8(%ebp),%eax
movl -108(%eax),%edi
movl -104(%ebp),%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl (%eax),%eax
cmpl %esi,%eax
je L15
L16:
movl $0,%eax
movl %eax,%eax
L17:
movl %eax,%ebx
movl $0,%eax
cmpl %ebx,%eax
jne L20
L21:
movl $0,%eax
movl %eax,%eax
L22:
movl %eax,%ebx
movl $0,%eax
cmpl %ebx,%eax
jne L25
L26:
movl $0,%eax
movl %eax,%eax
L27:
movl -104(%ebp),%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl %ebx,-104(%ebp)
movl -108(%ebp),%ebx
movl -104(%ebp),%eax
cmpl %ebx,%eax
jle L28
L38:
jmp L14
L15:
movl $1,%eax
movl %eax,%ecx
	movl	%ecx, -8(%ebp) # save pseudo-register
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
movl -116(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%esi
movl 8(%ebp),%eax
movl -116(%eax),%edi
movl -104(%ebp),%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl (%eax),%eax
cmpl %esi,%eax
je L18
L19:
movl $0,%eax
movl %eax,%ecx
	movl	%ecx, -8(%ebp) # save pseudo-register
L18:
	movl	-8(%ebp), %ecx # load pseudo-register
movl %ecx,%eax
jmp L17
L20:
movl $1,%eax
movl %eax,%ecx
	movl	%ecx, -8(%ebp) # save pseudo-register
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
movl $7,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
subl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
movl -120(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%esi
movl 8(%ebp),%eax
movl -120(%eax),%edi
movl -104(%ebp),%ebx
movl $7,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
subl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl (%eax),%eax
cmpl %esi,%eax
je L23
L24:
movl $0,%eax
movl %eax,%ecx
	movl	%ecx, -8(%ebp) # save pseudo-register
L23:
	movl	-8(%ebp), %ecx # load pseudo-register
movl %ecx,%eax
jmp L22
L25:
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%eax
pushl %eax
movl 8(%ebp),%eax
movl -108(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $1,%esi
movl 8(%ebp),%eax
movl -108(%eax),%edi
movl -104(%ebp),%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl %esi,(%eax)
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
movl -116(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $1,%esi
movl 8(%ebp),%eax
movl -116(%eax),%edi
movl -104(%ebp),%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl %esi,(%eax)
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
movl $7,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
subl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
movl -120(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $1,%esi
movl 8(%ebp),%eax
movl -120(%eax),%edi
movl -104(%ebp),%ebx
movl $7,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
subl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl %esi,(%eax)
pushl %eax
pushl %ecx
pushl %edx
movl 12(%ebp),%eax
pushl %eax
movl 8(%ebp),%eax
movl -112(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl 8(%ebp),%eax
movl -112(%eax),%edi
movl 12(%ebp),%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%edi
addl %ebx,%edi
movl $-104,%eax
movl %eax,%eax
addl %ebp,%eax
movl (%eax),%eax
movl %eax,(%edi)
pushl %eax
pushl %ecx
pushl %edx
movl 12(%ebp),%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
pushl %eax
call L1
addl $8,%esp
popl %edx
popl %ecx
popl %eax
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%eax
pushl %eax
movl 8(%ebp),%eax
movl -108(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%esi
movl 8(%ebp),%eax
movl -108(%eax),%edi
movl -104(%ebp),%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl %esi,(%eax)
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
movl -116(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%esi
movl 8(%ebp),%eax
movl -116(%eax),%edi
movl -104(%ebp),%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl %esi,(%eax)
pushl %eax
pushl %ecx
pushl %edx
movl -104(%ebp),%ebx
movl $7,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
subl %eax,%ebx
pushl %ebx
movl 8(%ebp),%eax
movl -120(%eax),%eax
pushl %eax
call arrayBounds
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $0,%esi
movl 8(%ebp),%eax
movl -120(%eax),%edi
movl -104(%ebp),%ebx
movl $7,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl 12(%ebp),%eax
movl %ebx,%ebx
subl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $4,%eax
movl %ebx,%ebx
imull %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
movl %esi,(%eax)
movl $0,%eax
movl %eax,%eax
jmp L27
L36:
popl %esi
popl %edi
popl %ebx
movl %ebp,%esp
popl %ebp
ret
.globl tigermain
.type tigermain, @function
tigermain:
pushl %ebp
movl %esp,%ebp
subl $120,%esp
pushl %ebx
pushl %edi
pushl %esi
L40:
movl $8,%ebx
movl %ebx,-104(%ebp)
movl $-108,%ebx
movl %ebx,%ebx
addl %ebp,%ebx
movl %ebx,%edi
pushl %eax
pushl %ecx
pushl %edx
movl $0,%eax
pushl %eax
movl $1,%ebx
movl -104(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
pushl %ebx
call initArray
addl $8,%esp
movl %eax,%ebx
popl %edx
popl %ecx
popl %eax
movl %ebx,(%edi)
movl $-112,%ebx
movl %ebx,%ebx
addl %ebp,%ebx
movl %ebx,%edi
pushl %eax
pushl %ecx
pushl %edx
movl $0,%eax
pushl %eax
movl $1,%ebx
movl -104(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
pushl %ebx
call initArray
addl $8,%esp
movl %eax,%ebx
popl %edx
popl %ecx
popl %eax
movl %ebx,(%edi)
movl $-116,%ebx
movl %ebx,%ebx
addl %ebp,%ebx
movl %ebx,%esi
pushl %eax
pushl %ecx
pushl %edx
movl $0,%eax
pushl %eax
movl $1,%edi
movl -104(%ebp),%ebx
movl -104(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
subl %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
pushl %eax
call initArray
addl $8,%esp
movl %eax,%ebx
popl %edx
popl %ecx
popl %eax
movl %ebx,(%esi)
movl $-120,%ebx
movl %ebx,%ebx
addl %ebp,%ebx
movl %ebx,%esi
pushl %eax
pushl %ecx
pushl %edx
movl $0,%eax
pushl %eax
movl $1,%edi
movl -104(%ebp),%ebx
movl -104(%ebp),%eax
movl %ebx,%ebx
addl %eax,%ebx
movl $1,%eax
movl %ebx,%ebx
subl %eax,%ebx
movl %edi,%eax
addl %ebx,%eax
pushl %eax
call initArray
addl $8,%esp
movl %eax,%ebx
popl %edx
popl %ecx
popl %eax
movl %ebx,(%esi)
pushl %eax
pushl %ecx
pushl %edx
movl $0,%eax
pushl %eax
pushl %ebp
call L1
addl $8,%esp
popl %edx
popl %ecx
popl %eax
movl $1,%eax
movl %eax,%eax
jmp L39
L39:
popl %esi
popl %edi
popl %ebx
movl %ebp,%esp
popl %ebp
ret

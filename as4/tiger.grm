(* CPSC 421 Compilers and Interpreters Spring 2015*)
(* Student: Lien Tran BR 2016 *)
(* Assignment #4 due February 18th 2015 *)

structure A = Absyn

(* Can someone explain to me what this is? *)
datatype lvalueVar = Field of Symbol.symbol
                   | Subscript of A.exp
fun makeLvalueVar(v, pos, l::r) = 
    (case l of 
      Field(idsym) => makeLvalueVar(A.FieldVar(v, idsym, pos), pos, r)
    | Subscript(exp) => makeLvalueVar(A.SubscriptVar(v, exp, pos), pos,r))
    | makeLvalueVar(v, _, nil) = v

%%
%term
    EOF 
  | ID of string
  | INT of int | STRING of string 
  | COMMA | COLON | SEMICOLON | LPAREN | RPAREN | LBRACK | RBRACK 
  | LBRACE | RBRACE | DOT 
  | PLUS | MINUS | TIMES | DIVIDE | EQ | NEQ | LT | LE | GT | GE
  | AND | OR | ASSIGN
  | ARRAY | IF | THEN | ELSE | WHILE | FOR | TO | DO | LET | IN | END | OF 
  | BREAK | NIL
  | FUNCTION | VAR | TYPE 
  | UMINUS

%nonterm  exp of A.exp 
| program of A.exp 
| lvalue of A.var 
| lvalue2 of lvalueVar list 
| decs of A.dec list 
| dec of A.dec
| ty of A.ty 
| tydecs of {name: Symbol.symbol, ty: A.ty, pos: pos} list
| tydec of {name: Symbol.symbol, ty: A.ty, pos: pos} 
| tyfields of A.tfield list
| tyfields2 of A.tfield list
| params of A.formals list
| params2 of A.formals list
| vardec of A.dec
| fundecs of A.fundec list
| fundec of A.fundec 
| func of A.exp
| record of A.efield list  
| record2 of A.efield list
| args of A.exp list
| args2 of A.exp list
| expseq of (A.exp * pos) list 
| expseq2 of (A.exp * pos) list

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%left ASSIGN
%left THEN DO OF 
%right ELSE
%left OR 
%left AND
%nonassoc EQ NEQ LT LE GT GE 
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%name Tiger

%keyword WHILE FOR TO BREAK LET IN END FUNCTION VAR TYPE ARRAY IF THEN ELSE 
  DO OF NIL

%prefer THEN ELSE LPAREN

%value ID ("bogus")
%value INT (1)
%value STRING ("")

%%

program : exp (exp)

lvalue: ID lvalue2 (makeLvalueVar(A.SimpleVar(Symbol.symbol(ID), IDleft), IDleft, lvalue2))  

lvalue2 : ([])
  | DOT ID lvalue2 (Field(Symbol.symbol(ID))::lvalue2)
  | LBRACK exp RBRACK lvalue2 (Subscript(exp)::lvalue2) 

exp : lvalue (A.VarExp(lvalue))
  | NIL (A.NilExp)                       
  | LPAREN expseq RPAREN (A.SeqExp(expseq)) 
  | INT (A.IntExp(INT))
  | STRING (A.StringExp(STRING, STRINGleft)) 
  | MINUS exp   %prec UMINUS (A.OpExp ({left = A.IntExp(0), oper = A.MinusOp, right = exp, pos = MINUSleft}))
  | exp PLUS exp (A.OpExp ({left = exp1, oper = A.PlusOp, right = exp2, pos = PLUSleft}))
  | exp MINUS exp (A.OpExp ({left = exp1, oper = A.MinusOp, right = exp2, pos = MINUSleft}))
  | exp TIMES exp (A.OpExp ({left = exp1, oper = A.TimesOp, right = exp2, pos = TIMESleft}))
  | exp DIVIDE exp (A.OpExp ({left = exp1, oper = A.DivideOp, right = exp2, pos = DIVIDEleft}))
  | exp EQ exp (A.OpExp ({left = exp1, oper = A.EqOp, right = exp2, pos = EQleft}))
  | exp NEQ exp (A.OpExp ({left = exp1, oper = A.NeqOp, right = exp2, pos = NEQleft}))
  | exp LT exp (A.OpExp ({left = exp1, oper = A.LtOp, right = exp2, pos = LTleft}))
  | exp LE exp (A.OpExp ({left = exp1, oper = A.LeOp, right = exp2, pos = LEleft}))
  | exp GT exp (A.OpExp ({left = exp1, oper = A.GtOp, right = exp2, pos = GTleft}))
  | exp GE exp (A.OpExp ({left = exp1, oper = A.GeOp, right = exp2, pos = GEleft}))
  | exp AND exp (A.IfExp ({test = exp1, then' = exp2, else' = SOME(A.IntExp(0)), pos = exp1left}))
  | exp OR exp (A.IfExp ({test = exp1, then' = A.IntExp(1), else' = SOME(exp2), pos = exp1left}))
  | LET decs IN expseq END (A.LetExp ({decs = decs, body = A.SeqExp(expseq), pos = LETleft})) (* let in end *)
  | IF exp THEN exp (A.IfExp ({test = exp1, then' = exp2, else' = NONE, pos = exp1left}))
  | IF exp THEN exp ELSE exp (A.IfExp ({test = exp1, then' = exp2, else' = SOME(exp3), pos = exp1left}))
  | WHILE exp DO exp (A.WhileExp ({test = exp1, body = exp2, pos = exp1left}))
  (* Why does FOR only need ID and not lvalue? I used lvalue and it became hard
    to figure out what to do with ForExp. Why do we need Symbol.symbol? *)
  | FOR ID ASSIGN exp TO exp DO exp (A.ForExp {var = {name = Symbol.symbol(ID), 
    escape = ref true}, lo = exp1, hi = exp2, body = exp3, pos = FORleft})
  | lvalue ASSIGN exp (A.AssignExp ({var = lvalue, exp = exp, pos = ASSIGNleft}))
  | BREAK (A.BreakExp(BREAKleft))
  | ID LBRACE record RBRACE (A.RecordExp{fields = record, typ = Symbol.symbol(ID), pos = IDleft}) 
  | ID LBRACK exp RBRACK OF exp (A.ArrayExp({typ = Symbol.symbol(ID), size = exp1, 
    init = exp2, pos = IDleft}))  (* array creation *)
  | ID LPAREN args RPAREN (A.AppExp {func = Symbol.symbol ID, args = args, pos = IDleft})     

args :  (* empty *) ([])                          
    |   exp args2 ([exp] @ args2)

args2 : (* empty *) ([])
    |   COMMA exp args2 ([exp] @ args2)

record :  (* empty *) ([])                       
    |     ID EQ exp record2 ([(Symbol.symbol(ID), exp, IDleft)] @ record2)

record2 : (* empty *) ([])
    |     COMMA ID EQ exp record2 ([(Symbol.symbol(ID), exp, IDleft)] @ record2)

(* What are these _left things? *)
expseq :  (* empty *) ([])                      
    |     exp expseq2 ([(exp, expleft)] @ expseq2)                 
                                  
expseq2 : (* empty *) ([])
    |     SEMICOLON exp expseq2 ([(exp, expleft)] @ expseq2)

decs:   (* empty *) ([])
    |   dec decs ([dec] @ decs)

dec:    vardec (vardec)
    |   tydecs (A.TypeDec tydecs)
    |   fundecs (A.FunctionDec fundecs)

tydecs: tydec              ([tydec])
    |   tydec tydecs       ([tydec] @ tydecs)

tydec : TYPE ID EQ ty ({name = Symbol.symbol(ID), ty = ty, pos = TYPEleft})           

ty :  ID (A.NameTy(Symbol.symbol(ID), IDleft))
    | LBRACE tyfields RBRACE (A.RecordTy(tyfields))
    | ARRAY OF ID (A.ArrayTy(Symbol.symbol(ID), ARRAYleft))

(* I have doubts about this syntax *)
tyfields :  (* empty *) ([])
    |       ID COLON ID tyfields2 ([{name = Symbol.symbol(ID1), 
            typ = Symbol.symbol(ID2), pos = ID1left}] @ tyfields2)

tyfields2 : (* empty *) ([])
    |       COMMA ID COLON ID tyfields2 ([{name = Symbol.symbol(ID1), 
            typ = Symbol.symbol(ID2), pos = ID1left}] @ tyfields2)

params :  (* empty *) ([])
    |     ID COLON ID params2 ([{var = {name = Symbol.symbol(ID1), 
          escape = ref true}, typ = Symbol.symbol(ID2), pos = ID1left}] @ params2)

params2 : (* empty *) ([])
    |     COMMA ID COLON ID params2 ([{var = {name = Symbol.symbol(ID1), 
          escape = ref true}, typ = Symbol.symbol(ID2), pos = ID1left}] @ params2)

vardec :  VAR ID ASSIGN exp (A.VarDec {var = {name = Symbol.symbol(ID), escape = ref true}, 
          typ = NONE, init = exp, pos = VARleft})      
    |     VAR ID COLON ID ASSIGN exp (A.VarDec {var = {name = Symbol.symbol(ID1), escape = ref true}, 
          typ = SOME(Symbol.symbol(ID2), ID2left), init = exp, pos = VARleft}) 

fundecs:  fundec ([fundec])
    |     fundec fundecs ([fundec] @ fundecs)

(* Do I actually pass params into here, or do I pass tyfields and make it into params? *)
(* What to do about params being a formals list instead of a tfield list? *)
fundec :  FUNCTION ID LPAREN params RPAREN EQ exp ({name = Symbol.symbol(ID), 
          params = params, result = NONE, body = exp, pos = FUNCTIONleft})      
    |     FUNCTION ID LPAREN params RPAREN COLON ID EQ exp ({name = Symbol.symbol(ID1),
          params = params, result = SOME(Symbol.symbol(ID2), ID2left), body = exp, pos = FUNCTIONleft})  
